{"version":3,"sources":["data sync /^/.*$","data/js.md","data/sample.md","components/shared/Navbar.js","views/Home.js","components/Highlighter.js","views/ContentPage.js","App.js","serviceWorker.js","index.js","data/doc-router.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","TopNavbar","Navbar","sticky","expand","className","style","backgroundColor","Container","Nav","Item","to","color","Brand","Link","href","target","Home","Row","Col","ButtonToolbar","doc","key","Button","size","width","bgColor","borderColor","link","nameColor","name","Highlighter","language","value","coy","ContentPage","params","match","useState","meta","setMeta","content","setContent","useEffect","a","document","docRouter","dataSrc","require","file","fetch","response","text","arrayText","split","contentArray","start","end","forEach","i","slice","push","join","length","console","log","fetchData","textAlign","indexOf","breakpointCols","default","1100","700","500","columnClassName","item","index","source","renderers","App","basename","fluid","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","js"],"mappings":"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","file":"static/js/main.297a6f6b.chunk.js","sourcesContent":["var map = {\n\t\"./doc-router\": 8,\n\t\"./doc-router.js\": 8,\n\t\"./js.md\": 375,\n\t\"./sample.md\": 376\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 374;","module.exports = __webpack_public_path__ + \"static/media/js.90ca0521.md\";","module.exports = __webpack_public_path__ + \"static/media/sample.2ec7e4f8.md\";","import React from \"react\";\r\n// import React, { useState, useEffect } from \"react\";\r\nimport { Container, Navbar, Nav } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n// import { useLocation } from \"react-router-dom\";\r\nconst TopNavbar = () => {\r\n  // let location = useLocation();\r\n  // // const [status, setStatus] = useState({\r\n  // //   isHome: false\r\n  // // });\r\n\r\n  // const [isHome, setIsHome] = useState(false);\r\n  // useEffect(() => {\r\n  //   async function checkStatus() {\r\n  //     if (location.pathname === \"/\") {\r\n  //       setIsHome(true);\r\n  //     }\r\n  //     console.log(isHome);\r\n  //   }\r\n  //   checkStatus();\r\n  // }, [location]);\r\n\r\n  return (\r\n    <Navbar\r\n      sticky=\"top\"\r\n      expand=\"lg\"\r\n      className=\"justify-content-between\"\r\n      style={{ backgroundColor: \"white\" }}\r\n    >\r\n      <Container>\r\n        <Nav.Item>\r\n          <Link to=\"/\">\r\n            <i className=\"fas fa-arrow-left\" style={{ color: \"green\" }}></i>\r\n          </Link>\r\n        </Nav.Item>\r\n        <Navbar.Brand>ForDev</Navbar.Brand>\r\n        <Nav.Item>\r\n          <Nav.Link href=\"https://github.com/phucblog/fordev\" target=\"_blank\">\r\n            Github\r\n          </Nav.Link>\r\n        </Nav.Item>\r\n      </Container>\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nexport default TopNavbar;\r\n","import React from \"react\";\r\nimport { Container, Row, Col, ButtonToolbar, Button } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../asset/styles/home.scss\";\r\nimport doc from \"../data/doc-router\";\r\n\r\nfunction Home() {\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        <Col>\r\n          <div className=\"home-header\">\r\n            <h1>Cheatsheets For Dev</h1>\r\n            <p>\r\n              Hi! I'm a @bot and this is a collection of cheatsheets I've\r\n              collected\r\n            </p>\r\n          </div>\r\n          {/* <Link to=\"/js\">To Js Page</Link> */}\r\n          <ButtonToolbar>\r\n            {Object.keys(doc).map(function(key) {\r\n              return (\r\n                <Button\r\n                  size=\"lg\"\r\n                  className=\"button-item\"\r\n                  key={doc[key].id}\r\n                  style={{\r\n                    width: \"200px\",\r\n                    backgroundColor: doc[key].bgColor,\r\n                    borderColor: doc[key].bgColor\r\n                  }}\r\n                >\r\n                  <Link\r\n                    to={doc[key].link}\r\n                    style={{ color: doc[key].nameColor }}\r\n                  >\r\n                    {doc[key].name}\r\n                  </Link>\r\n                </Button>\r\n              );\r\n            })}\r\n            {/* <Button variant=\"warning\" size=\"lg\" className=\"button-item\">\r\n              Javascript\r\n            </Button>\r\n            <Button variant=\"secondary\" size=\"lg\" className=\"button-item\">\r\n              Large button\r\n            </Button> */}\r\n          </ButtonToolbar>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\r\nimport { coy } from \"react-syntax-highlighter/dist/esm/styles/prism\";\r\n\r\nconst Highlighter = ({ language, value }) => {\r\n  if (!language) language = \"javascript\";\r\n  if (!value) value = \"\";\r\n\r\n  return (\r\n    <SyntaxHighlighter language={language} style={coy}>\r\n      {value}\r\n    </SyntaxHighlighter>\r\n  );\r\n};\r\n\r\nexport default Highlighter;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\nimport ReactMarkdown from \"react-markdown\";\r\nimport Highlighter from \"../components/Highlighter\";\r\nimport Masonry from \"react-masonry-css\";\r\nimport \"../asset/styles/ContentPage.scss\";\r\nimport docRouter from \"../data/doc-router\";\r\n\r\nfunction ContentPage({ match }) {\r\n  const { params } = match;\r\n  const [meta, setMeta] = useState([]);\r\n  const [content, setContent] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      try {\r\n        // match.params\r\n        const document = docRouter[params.name];\r\n        const dataSrc = require(`../data/${document.file}`);\r\n        const response = await fetch(dataSrc);\r\n        const text = await response.text();\r\n        const arrayText = text.split(/\\r\\n|\\r|\\n/g);\r\n        const contentArray = [];\r\n        let start = 0;\r\n        let end = 0;\r\n        arrayText.forEach((e, i) => {\r\n          if (i !== 0 && e === \"---\") {\r\n            setMeta(arrayText.slice(0, i + 1));\r\n          }\r\n          if (e.slice(0, 3) === \"## \") {\r\n            if (start === 0) {\r\n              start = i;\r\n              // end = i - 1;\r\n            } else {\r\n              end = i - 1;\r\n              contentArray.push(arrayText.slice(start, end).join(\"\\n\"));\r\n              start = i;\r\n            }\r\n          }\r\n          if (i === arrayText.length - 1) {\r\n            end = i - 1;\r\n            contentArray.push(arrayText.slice(start, end).join(\"\\n\"));\r\n          }\r\n        });\r\n        // setMeta(contentArray.shift());\r\n        setContent(contentArray);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n    fetchData();\r\n  }, [params]);\r\n\r\n  const breakpointColumnsObj = {\r\n    default: 3,\r\n    1100: 2,\r\n    700: 1,\r\n    500: 1\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Row style={{ textAlign: \"center\" }}>\r\n        <Col>\r\n          <h1 className=\"page-title\">\r\n            {meta[1]\r\n              ? meta[1].slice(meta[1].indexOf(\":\") + 2, meta[1].length)\r\n              : \"\"}\r\n          </h1>\r\n        </Col>\r\n      </Row>\r\n      <Masonry\r\n        breakpointCols={breakpointColumnsObj}\r\n        className=\"my-masonry-grid\"\r\n        columnClassName=\"my-masonry-grid_column\"\r\n      >\r\n        {content.map((item, index) => {\r\n          return (\r\n            <div className=\"grid-item\">\r\n              <ReactMarkdown\r\n                source={item}\r\n                key={index}\r\n                renderers={{ code: Highlighter }}\r\n                className={\"my-masonry-grid_column\"}\r\n              />\r\n            </div>\r\n          );\r\n        })}\r\n      </Masonry>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ContentPage;\r\n","import React from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Navbar from \"./components/shared/Navbar\";\nimport Home from \"./views/Home\";\nimport ContentPage from \"./views/ContentPage\";\nimport \"./asset/styles/main.scss\";\n\nfunction App() {\n  const baseUrl =\n    process.env.NODE_ENV === \"production\"\n      ? \"https://phucblog.github.io/fordev/\"\n      : \"/\";\n\n  return (\n    <Router basename={baseUrl}>\n      <div className=\"something\">\n        <Navbar />\n        <Container fluid={true}>\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/:name\" component={ContentPage} />\n          </Switch>\n        </Container>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const doc = {\r\n  js: {\r\n    id: 1,\r\n    name: \"Javascript\",\r\n    nameColor: \"black\",\r\n    bgColor: \"#ffc107\",\r\n    link: \"js\",\r\n    file: \"js.md\"\r\n  }\r\n};\r\n\r\nexport default doc;\r\n"],"sourceRoot":""}